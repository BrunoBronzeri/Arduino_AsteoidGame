#include <LiquidCrystal.h>

LiquidCrystal lcd (8,9,4,5,6,7);

int pin_trig = 3, pin_echo=2;
int buzzer = 10;
int gatilho = A0;

float distancia;
int tempo;
int positionAst = 15;
int positionNAVE = 0;
int positionTiro =15;
int positionTiro1 =15;
int linha;
int asteroide;
int x=0,y=0;

//nave

  
byte nave[8]{
  
  B10000,
  B11000,
  B10100,
  B11111,
  B11110,
  B10100,
  B11000,
  B10000,

};

//byte em branco
byte branco[8]{
  
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,

};


//asteroides

byte ast1[8]{
  B00100,
  B01010,
  B10001,
  B10001,
  B10001,
  B10001,
  B01010,
  B00100,
};

//tiro
byte tiro[8]{
  B00000,
  B00000,
  B01110,
  B11111,
  B01110,
  B00000,
  B00000,
  B00000,
};

void setup()
{
  pinMode(pin_trig, OUTPUT);
  pinMode(pin_echo,INPUT);
  pinMode(buzzer, OUTPUT);
  
  
  Serial.begin(9600);
  
  lcd.createChar(5,tiro);
  lcd.createChar(0, nave);
  lcd.begin(16, 2); //setup da nave no LCD

}

int nave1(){


  distancia= nivel();
  
    if(distancia > 120){
    
    positionNAVE = 0;
   
    lcd.createChar(4, branco);
   	lcd.setCursor(0,positionNAVE+1);
    lcd.write(byte(4));
 	lcd.setCursor(0,positionNAVE);
    lcd.write(byte(0));
    
   }
    
if(distancia < 120){
       
  positionNAVE = 1;
  
  lcd.createChar(4, branco);
  lcd.setCursor(0,positionNAVE-1);
  lcd.write(byte(4));
  lcd.setCursor(0,positionNAVE);
  lcd.write(byte(0));
  
  
}
 
  
  return positionNAVE;
}



float nivel() {
  
  int tempo;
  float distancia;
  
  digitalWrite(pin_trig, LOW);
  delayMicroseconds(10);
  
  digitalWrite(pin_trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(pin_trig, LOW);
 
  tempo = pulseIn(pin_echo,HIGH);
  
  distancia= tempo*  0.017;
  

  
  return distancia;
}
  
void loop() {
  
    random (asteroide, linha);
 	positionAst = 16;
}



void random (int asteroide, int linha){
  
 int n = random(2); //n para asteroide

 Serial.println(n);
 delay(10);
 

while(positionAst >= -1){
int grau1 = grau(); 
 
 
  
nave1();
  
if(grau1==180 && positionNAVE == 0){//LED VERDE HIGH
    x=1;      						//FAZER GATILHO VOLTAR
  }
  if(grau1==180 && positionNAVE == 1){//LED VERDE HIGH
  y=1;
  }
if(positionTiro<=1){//positionTiro==0
  positionTiro=15;
  x=0;
  y=0;
  delay(400);

 }
  


if( x==1 && positionNAVE == 0 ){
  		tiro1();
  
  positionTiro--;
  }
if( x==1 && positionNAVE == 1){
    	tiro1();
  positionTiro--;

}
  if( y==1 && positionNAVE == 1 ){
  		tiro2();
  positionTiro--;
  
  }
if( y==1 && positionNAVE == 0){
    	tiro2();
  positionTiro--;

}


   lcd.createChar(4, branco);
   lcd.setCursor(positionAst+1,n);
    lcd.write(byte(4));
    
    lcd.createChar(2, ast1);
    lcd.setCursor(positionAst,n); //(0)
    lcd.write(2);
    
    lcd.createChar(2, ast1);
    lcd.setCursor(positionAst, n); //(0)
    lcd.write(2);
    
    delay(10);
    
    
    positionAst--;
  	//positionTiro--;
  
 
   	
  if( nave1() == n && positionAst == 0 ){
  
  	
    lcd.setCursor(6,0);
    lcd.print("GAME");
    lcd.setCursor(6,1);
    lcd.print("OVER");
   
    
    tone( buzzer, 261);
    delay(100);
    noTone(buzzer);
    
     lcd.clear();
      break;
    
      }

   } 
}

int grau (){ 
  	int valor = map(analogRead(A0), 33, 6, 0, 180);
  	Serial.println(valor);
	return valor;
}



int tiro1(){

   
    lcd.setCursor(16-positionTiro,0);
    lcd.write(byte(5));
    delay(100);
  
    lcd.createChar(4, branco);
   	lcd.setCursor(16-positionTiro,0);
    lcd.write(byte(4));
  

 return positionTiro;
}
int tiro2(){

   
    lcd.setCursor(16-positionTiro,1);
    lcd.write(byte(5));
    delay(100);
  
    lcd.createChar(4, branco);
   	lcd.setCursor(16-positionTiro,1);
    lcd.write(byte(4));
  

 return positionTiro;
}
